#!/bin/bash

# Function to display the banner
banner() {
    cat << "EOF" | lolcat
                                          .   ,
                                        '. '.  \  \
                                        ._ '-.'. `\  \
                                          '-._; .'; `-.'. 
                                        `~-.; '.       '.
                                          '--,`           '.
                                            -='.          ;
                                  .--=~~=-,    -.;        ;
                                  .-=`;    `~,_.;        /
                                  `  ,-`'    .-;         |
                                    .-~`.    .;         ;
                                      .;.-   .-;         ,\
                                        `.'   ,=;     .-'  `~.-._
                                        .';   .';  .'      .'   '-.
                                          .\  ;  ;        ,.' _  a',
                                          .'~";-`   ;      ;"~` `'-=.)
                                        .' .'   . _;  ;',  ;
                                        '-.._`~`.'  \  ; ; :
                                            `~'    _'\\_ \\_ 
                                                  /=`^^=`""/`)-.
                                                  \ =  _ =     =\
                                                    `""` `~-. =   ;
________________________________    _____  .___ _______      _____  .____            ___________________   ________  .____       _________
\__    ___/\_   _____/\______   \  /     \ |   |\      \    /  _  \ |    |           \__    ___/\_____  \  \_____  \ |    |     /   _____/
  |    |    |    __)_  |       _/ /  \ /  \|   |/   |   \  /  /_\  \|    |      ______ |    |    /   |   \  /   |   \|    |     \_____  \ 
  |    |    |        \ |    |   \/    Y    \   /    |    \/    |    \    |___  /_____/ |    |   /    |    \/    |    \    |___  /        \
  |____|   /_______  / |____|_  /\____|__  /___\____|__  /\____|__  /_______ \         |____|   \_______  /\_______  /_______ \/_______  / 
                   \/         \/         \/            \/         \/        \/                          \/         \/        \/        \/ 
EOF

    echo -e "\nWelcome to the CR42 Script!" | lolcat
}

# Figlet style selection
select_figlet() {
    local figlet_styles=(
        "slant"
        "centered"
        "wide"
        "left-align"
        "right-align"
        "terminal-width"
        "Return to Main Menu"
    )

    local style=$(printf "%s\n" "${figlet_styles[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$style" == "Return to Main Menu" ]]; then
        return 0
    fi

    if [[ -n "$style" ]]; then
        echo "Enter the text to print:"
        read -r text_to_print

        case $style in
            "slant")
                figlet -f slant "$text_to_print" | lolcat
                ;;
            "centered")
                figlet -c "$text_to_print" | lolcat
                ;;
            "wide")
                figlet -w 80 "$text_to_print" | lolcat
                ;;
            "left-align")
                figlet -l "$text_to_print" | lolcat
                ;;
            "right-align")
                figlet -r "$text_to_print" | lolcat
                ;;
            "terminal-width")
                figlet -t "$text_to_print" | lolcat
                ;;
            *)
                echo "Invalid option!"
                ;;
        esac
    fi

    # Prompt to return to the main menu
    read -p "Press [Enter] to return to the Text printing menu..." input
}

# Toilet style selection
select_toilet() {
    local toilet_styles=(
        "metal"
        "gay"
        "Return to Main Menu"
    )

    local style=$(printf "%s\n" "${toilet_styles[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$style" == "Return to Main Menu" ]]; then
        return 0
    fi

    if [[ -n "$style" ]]; then
        echo "Enter the text to print:"
        read -r text_to_print

        case $style in
            "metal")
                toilet -F metal "$text_to_print" | lolcat
                ;;
            "gay")
                toilet -F gay "$text_to_print" | lolcat
                ;;
            *)
                echo "Invalid option!"
                ;;
        esac
    fi

    # Prompt to return to the main menu
    read -p "Press [Enter] to return to the Text printing menu..." input
}

# Cowsay style selection
select_cowsay() {
    echo "Enter the text to cowsay:"
    read -r cowsay_text
    cowsay "$cowsay_text" | lolcat

    # Prompt to return to the main menu
    read -p "Press [Enter] to return to the Text printing menu..." input
}

# Boxes style selection
select_boxes() {
    local boxes_styles=(
        "ada-box"
        "ada-cmt"
        "bear"
        "boxquote"
        "boy"
        "c-cmt"
        "cat"
        "dog"
        "scroll"
        "spring"
        "stark1"
        "twisted"
        "unicornsay"
        "Return to Main Menu"
    )

    local style=$(printf "%s\n" "${boxes_styles[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$style" == "Return to Main Menu" ]]; then
        return 0
    fi

    if [[ -n "$style" ]]; then
        echo "Enter the text to box:"
        read -r text_to_print

        if command -v boxes &> /dev/null; then
            echo "$text_to_print" | boxes -d "$style" | lolcat
        else
            echo "Error: 'boxes' command not found. Please install it."
        fi
    fi

    # Prompt to return to the main menu
    read -p "Press [Enter] to return to the Text printing menu..." input
}

# Main menu function
menu() {
    local choices=(
        "List files"
        "Fun and Entertainment Tools"
        "Network Tools"
        "File Management Tools"
        "System Monitoring and Performance Tools"
        "Productivity Tools"
        "Exit"
    )

    local selected=$(printf "%s\n" "${choices[@]}" | fzf --height=10 --border --reverse --ansi)

    case $selected in
        "List files")
            ranger
            ;;
        "Fun and Entertainment Tools")
            while true; do
                select_fun_tools
                echo -n "Press [Enter] key to return to fun tools menu or 'q' to exit..."
                read -r input
                if [ "$input" == "q" ]; then
                    break
                fi
            done
            ;;
        "Network Tools")
            while true; do
                select_network_tools
                echo -n "Press [Enter] key to return to network tools menu or 'q' to exit..."
                read -r input
                if [ "$input" == "q" ]; then
                    break
                fi
            done
            ;;
        "File Management Tools")
            while true; do
                select_file_management_tools
                echo -n "Press [Enter] key to return to file management menu or 'q' to exit..."
                read -r input
                if [ "$input" == "q" ]; then
                    break
                fi
            done
            ;;
        "System Monitoring and Performance Tools")
            while true; do
                select_system_monitoring_tools
                echo -n "Press [Enter] key to return to system monitoring menu or 'q' to exit..."
                read -r input
                if [ "$input" == "q" ]; then
                    break
                fi
            done
            ;;
        "Productivity Tools")
            while true; do
                select_productivity_tools
                echo -n "Press [Enter] key to return to productivity tools menu or 'q' to exit..."
                read -r input
                if [ "$input" == "q" ]; then
                    break
                fi
            done
            ;;
        "Exit")
            exit 0
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

# Fun and Entertainment Tools
select_fun_tools() {
    local fun_tools=(
        "fortune"
        "sl"
        "lolcat"
        "Text printing"
        "cmatrix"
        "cbonsai"
        "oneko"
        "neofetch"
        "Return to Main Menu"
    )

    echo "Select a fun tool:"
    local fun_choice=$(printf "%s\n" "${fun_tools[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$fun_choice" == "Return to Main Menu" ]]; then
        return 0
    fi

    case $fun_choice in
        "fortune")
            fortune | lolcat
            ;;
        "sl")
            sl
            ;;
        "lolcat")
            echo "Enter the text to rainbowize:"
            read -r lolcat_text
            echo "$lolcat_text" | lolcat
            ;;
        "Text printing")
            select_text_printing
            ;;
        "cmatrix")
            cmatrix
            ;;
        "cbonsai")
            cbonsai
            ;;
        "oneko")
            oneko
            ;;
        "neofetch")
            neofetch
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

# Text printing tools (Figlet, Toilet, Cowsay, Boxes)
select_text_printing() {
    local text_printing_tools=(
        "figlet"
        "toilet"
        "cowsay"
        "boxes"
        "Return to Main Menu"
    )

    echo "Select a text printing tool:"
    local printing_choice=$(printf "%s\n" "${text_printing_tools[@]}" | fzf --height=10 --border --reverse --ansi)

    case $printing_choice in
        "figlet")
            select_figlet
            ;;
        "toilet")
            select_toilet
            ;;
        "cowsay")
            select_cowsay
            ;;
        "boxes")
            select_boxes
            ;;
        "Return to Main Menu")
            return 0
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

# Network Tools
select_network_tools() {
    local net_tools=(
        "ping"
        "traceroute"
        "curl"
        "wget"
        "iftop"
        "Return to Main Menu"
    )

    echo "Select a network tool:"
    local net_choice=$(printf "%s\n" "${net_tools[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$net_choice" == "Return to Main Menu" ]]; then
        return 0
    fi

    case $net_choice in
        "ping")
            echo "Enter the host to ping:"
            read -r host
            ping "$host"
            ;;
        "traceroute")
            echo "Enter the host to traceroute:"
            read -r host
            traceroute "$host"
            ;;
        "curl")
            echo "Enter the URL to curl:"
            read -r url
            curl "$url"
            ;;
        "wget")
            echo "Enter the URL to wget:"
            read -r url
            wget "$url"
            ;;
        "iftop")
            sudo iftop
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

# File Management Tools
select_file_management_tools() {
    local file_tools=(
        "ls"
        "cp"
        "mv"
        "rm"
        "touch"
        "Return to Main Menu"
    )

    echo "Select a file management tool:"
    local file_choice=$(printf "%s\n" "${file_tools[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$file_choice" == "Return to Main Menu" ]]; then
        return 0
    fi

    case $file_choice in
        "ls")
            ls
            ;;
        "cp")
            echo "Enter the source file to copy:"
            read -r src_file
            echo "Enter the destination file:"
            read -r dest_file
            cp "$src_file" "$dest_file"
            ;;
        "mv")
            echo "Enter the source file to move:"
            read -r src_file
            echo "Enter the destination file:"
            read -r dest_file
            mv "$src_file" "$dest_file"
            ;;
        "rm")
            echo "Enter the file to remove:"
            read -r file
            rm "$file"
            ;;
        "touch")
            echo "Enter the file to create:"
            read -r file
            touch "$file"
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

# System Monitoring and Performance Tools
select_system_monitoring_tools() {
    local sys_tools=(
        "htop"
        "glances"
        "speedtest-cli"
        "bpytop"
        "nload"
        "inxi"
        "hollywood"
        "Return to Main Menu"
    )

    echo "Select a system monitoring tool:"
    local sys_choice=$(printf "%s\n" "${sys_tools[@]}" | fzf --height=10 --border --reverse --ansi)

    if [[ "$sys_choice" == "Return to Main Menu" ]]; then
        return 0
    fi

    case $sys_choice in
        "htop")
            htop
            ;;
        "glances")
            glances
            ;;
        "speedtest-cli")
            speedtest-cli
            ;;
        "bpytop")
            bpytop
            ;;
        "nload")
            nload
            ;;
        "inxi")
            inxi -F
            ;;
        "hollywood")
            hollywood
            ;;
        *)
            echo "Invalid option"
            ;;
    esac
}

# Call the banner
banner

# Run the main menu
menu
